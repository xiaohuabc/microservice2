<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <packaging>pom</packaging>

    <modules>
        <module>provider1</module>
        <module>provider2</module>
        <module>common</module>
        <module>eureka-server1</module>
        <module>eureka-client1</module>
        <module>consumer1</module>
        <module>consumer2</module>
        <module>eureka-server2</module>
        <module>eureka-server</module>
        <module>provider</module>
        <module>provider-zk1</module>
        <module>provider-zk2</module>
        <module>consumer-zk1</module>
        <module>provider-consul1</module>
        <module>provider-consul2</module>
        <module>consumer-consul</module>
        <module>provider-nacos1</module>
        <module>provider-nacos2</module>
        <module>consumer-nacos1</module>
        <module>consumer-consul-ribbon</module>
        <module>consumer-consul-ribbon-myloadbalance</module>
        <module>consumer-consul-openfeign</module>
        <module>provider-consul-histrix1</module>
        <module>provider-consul-histrix2</module>
        <module>consumer-consul-openfeign-histrix</module>
        <module>hystrixdashboard</module>
        <module>provider-nacos-openfeign-sentinel1</module>
        <module>provider-nacos-openfeign-sentinel2</module>
        <module>consumer-nacos-openfeign-sentinel1</module>
        <module>gateway</module>
        <module>gateway-lb</module>
        <module>config-server</module>
        <module>config-client</module>
        <module>config-client2</module>
    </modules>
    <!--指定spring-boot版本信息-->
    <!--
        好啦，我破案了，spring-boot-starter-parent的parent是spring-boot-dependencies
        所以引入spring-boot-starter-parent即可
    -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.2.2.RELEASE</version>
        <relativePath/>
    </parent>

    <groupId>com.xiaohu</groupId>
    <artifactId>microservice2</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>microservice2</name>
    <description>Demo project for Spring Boot</description>

    <!--父pom指定版本号-->
    <properties>

        <xiaohu.common.version>0.0.1-SNAPSHOT</xiaohu.common.version>

        <!--<java.version>1.8</java.version>-->

        <mybatis-plus.version>3.2.0</mybatis-plus.version>
        <druid.version>1.2.4</druid.version>
        <!--<mysql-connector-java.version>5.1.45</mysql-connector-java.version>-->
        <!--<jdbc.version>2.2.2.RELEASE</jdbc.version>-->

        <!--<devtools.version>2.4.1</devtools.version>-->
        <swagger2.version>2.6.1</swagger2.version>
        <swagger-ui.version>2.6.1</swagger-ui.version>
        <!--<lombok.version>1.16.16</lombok.version>-->
        <fast-json.version>1.2.61</fast-json.version>
        <eureka-server.version>2.2.2.RELEASE</eureka-server.version>
        <eureka-client.version>2.2.2.RELEASE</eureka-client.version>
        <ribbon.version>2.2.2.RELEASE</ribbon.version>
        <histrix.version>2.2.2.RELEASE</histrix.version>
        <zipkin.version>2.2.2.RELEASE</zipkin.version>
        <sentinel.version>2.2.2.RELEASE</sentinel.version>
        <sentinel-datasource.version>1.7.2</sentinel-datasource.version>
        <gateway.version>2.2.2.RELEASE</gateway.version>
        <zookeeper-client.version>3.0.0</zookeeper-client.version>
        <consul-client.version>2.2.2.RELEASE</consul-client.version>
        <nacos-client.version>2.2.2.RELEASE</nacos-client.version>
        <!--<openfeign.version>3.0.0</openfeign.version>-->
        <openfeign.version>2.2.2.RELEASE</openfeign.version>

        <!--<spring-boot-test.version>2.4.0</spring-boot-test.version>-->
        <spring-boot-dependencies.version>2.2.2.RELEASE</spring-boot-dependencies.version>
        <spring-cloud-dependencies.version>Hoxton.SR2</spring-cloud-dependencies.version>
        <spring-cloud-alibaba-dependencies.version>2.2.2.RELEASE</spring-cloud-alibaba-dependencies.version>

        <!--
            这次启动项目，出现了两个问题：
            1、druid数据库连接池和SpringBoot版本选型问题
            2、tomcat.version导致的项目启动失败
        -->
<!--
        <tomcat.version>8.5.28</tomcat.version>
        <springframework.version>4.3.13.RELEASE</springframework.version>
        <commons-io.version>2.6</commons-io.version>
        <org.apache.commons.io.version>1.3.2</org.apache.commons.io.version>
        <commons-fileupload.version>1.3.3</commons-fileupload.version>
        <commons-codec.version>1.10</commons-codec.version>
        <commons-lang3.version>3.6</commons-lang3.version>
        <okhttp.version>3.9.1</okhttp.version>
        <feign-okhttp.version>8.18.0</feign-okhttp.version>
        <springfox-swagger.version>2.7.0</springfox-swagger.version>
        <fastjson.version>1.2.58</fastjson.version>
        <fastdfs-client-java.version>1.27.0.0</fastdfs-client-java.version>
        <guava.version>24.0-jre</guava.version>
        <cse.version>2.3.62</cse.version>
        <cse-solution-service-engine.version>2.3.62</cse-solution-service-engine.version>
        <spring-boot-starter-provider.version>1.1.0.B019</spring-boot-starter-provider.version>
        <pagehelper-spring-boot-starter.version>1.2.3</pagehelper-spring-boot-starter.version>
        <json.version>20180130</json.version>
        <nekohtml.version>1.9.22</nekohtml.version>
        <thymeleaf-extras-shiro.version>1.2.1</thymeleaf-extras-shiro.version>
        <shiro.version>1.3.2</shiro.version>
        <velocity-engine-core.version>2.0</velocity-engine-core.version>
        <pagehelper.version.version>4.1.6</pagehelper.version.version>
        <spring-boot-starter-security.version>2.0.1.RELEASE</spring-boot-starter-security.version>
        <spring-boot-starter-data-redis.version>1.5.5.RELEASE</spring-boot-starter-data-redis.version>
        <jjwt.version>0.6.0</jjwt.version>
        <jedis.version>2.9.0</jedis.version>
        <velocity-engine-core.version>2.0</velocity-engine-core.version>
        <spring-data-redis.version>1.8.4.RELEASE</spring-data-redis.version>
        <spring-security-core.version>5.0.4.RELEASE</spring-security-core.version>
        <jasypt-spring-boot-starter.version>1.8</jasypt-spring-boot-starter.version>
        <amqp.version>2.0.1.RELEASE</amqp.version>
        <commons-pool2.version>2.4.2</commons-pool2.version>
-->

    </properties>

    <!--
        dependencyManagement只声明依赖，并不实际引用
        子类需要显示声明要使用的依赖，版本号由此锁定
    -->

    <!--还是可以声明一些公有的依赖，让继承下去-->
    <dependencies>
        <!-- swagger2相关-->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>${swagger2.version}</version>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>${swagger-ui.version}</version>
        </dependency>

        <!--这些没指定版本号的依赖，都是在dependencies里定义了-->
        <!--fastjson模块-->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>${fast-json.version}</version>
        </dependency>

        <!--引入lombok-->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>

        <!--这俩一般一起出现，web应用，程序监控-->
        <!--<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>-->

        <!--项目热部署-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-ribbon</artifactId>
            <version>${ribbon.version}</version>
        </dependency>

    </dependencies>

    <dependencyManagement>
        <dependencies>
            <!--依赖项目其他模块-->
            <dependency>
                <groupId>com.xiaohu</groupId>
                <artifactId>model</artifactId>
                <version>${xiaohu.model.version}</version>
            </dependency>
            <dependency>
                <groupId>com.xiaohu</groupId>
                <artifactId>common</artifactId>
                <version>${xiaohu.common.version}</version>
            </dependency>
            <dependency>
                <groupId>com.xiaohu</groupId>
                <artifactId>utils</artifactId>
                <version>${xiaohu.utils.version}</version>
            </dependency>

            <!--
                spring-boot-starter-web包含了spring-boot-starter
                所以引入了web模块，就不需要spring-boot-starter了
                并且，spring-boot-dependencies指定了web模块版本
            -->
            <!--
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter</artifactId>
            </dependency>
            -->

            <!--
                SpringBoot整合SpringCloud、SpringCloudAlibaba
                引入下面三个pom依赖即可。作用域是import，只能定义在dependencyManagement里面
                用来规范依赖版本，添加依赖时，如果这三个pom中有定义版本，就可以不指定版本了
            -->
            <!--<dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot-dependencies.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>-->

            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud-dependencies.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <dependency>
                <groupId>com.alibaba.cloud</groupId>
                <artifactId>spring-cloud-alibaba-dependencies</artifactId>
                <version>${spring-cloud-alibaba-dependencies.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>


            <!--启用测试-->
            <!--<dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-test</artifactId>
                <version>${spring-boot-test.version}</version>
                <scope>test</scope>
            </dependency>-->


            <!--数据库连接管理相关-->
            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>mybatis-plus-boot-starter</artifactId>
                <version>${mybatis-plus.version}</version>
            </dependency>

            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid-spring-boot-starter</artifactId>
                <version>${druid.version}</version>
            </dependency>

            <!--<dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>${mysql-connector-java.version}</version>
            </dependency>-->

            <!--<dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-jdbc</artifactId>
                <version>${jdbc.version}</version>
            </dependency>-->

            <!--开发工具类-->

            <!--<dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-devtools</artifactId>
                <version>${devtools.version}</version>
                <scope>runtime</scope>
                <optional>true</optional>
            </dependency>-->

            <!--Eureka客户端-->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
                <version>${eureka-server.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
                <version>${eureka-client.version}</version>
            </dependency>

            <!--Zookeeper客户端-->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-starter-zookeeper-discovery</artifactId>
                <version>${zookeeper-client.version}</version>
            </dependency>

            <!--consul客户端-->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-starter-consul-discovery</artifactId>
                <version>${consul-client.version}</version>
            </dependency>

            <!--nacos客户端-->
            <dependency>
                <groupId>com.alibaba.cloud</groupId>
                <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
                <version>${nacos-client.version}</version>
            </dependency>

            <!--openfeign客户端-->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-starter-openfeign</artifactId>
                <version>${openfeign.version}</version>
            </dependency>

            <!--hystrix服务高可用-->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
                <version>${histrix.version}</version>
            </dependency>

            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-starter-netflix-hystrix-dashboard</artifactId>
                <version>${histrix.version}</version>
            </dependency>

            <!--引入zipkin、sleuth，需要定义版本，否则，可能版本错乱，导致，服务注册进zipkin失败
                最好像下面这样，共用一个版本号
            -->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-starter-zipkin</artifactId>
                <version>${zipkin.version}</version>
            </dependency>

            <dependency>
                <groupId>com.alibaba.cloud</groupId>
                <artifactId>spring-cloud-starter-alibaba-sentinel</artifactId>
                <version>${sentinel.version}</version>
            </dependency>

            <dependency>
                <groupId>com.alibaba.csp</groupId>
                <artifactId>sentinel-datasource-nacos</artifactId>
                <version>${sentinel-datasource.version}</version>
            </dependency>

            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-starter-gateway</artifactId>
                <version>${gateway.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <!--
        百度了一下，下面spring的maven插件，只能打包web项目，要有main启动方法
        https://blog.csdn.net/chl191623691/article/details/101422761
    -->
    <!--<build>
        &lt;!&ndash;指定打包的名字&ndash;&gt;
        <finalName>${project.artifactId}</finalName>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>-->
    <build>
        <finalName>${project.artifactId}</finalName>
        <plugins>
            <!-- java编译插件 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <!-- 配置项目远程仓库（参考：https://blog.csdn.net/qq_31924435/article/details/53745811）
        一般远程仓库，会配置账号、密码安全认证。需要在maven的settings.xml配置文件中，指定账号密码
        mvn install  会将项目生成的构件安装到本地Maven仓库，
        mvn deploy 用来将项目生成的构件分发到远程Maven仓库。

        repository指定稳定版的仓库地址
        snapshotRepository指定开发版的仓库地址
    -->
    <!--
    <distributionManagement>
        <repository>
            <id>releases</id>
            <url>https://devrepo-cn-east-2.devcloud.huaweicloud.com/01/nexus/content/repositories/68363c8eed00404786cbc63b89f99838_1_0/</url>
        </repository>

        <snapshotRepository>
            <id>snapshots</id>
            <url>https://devrepo-cn-east-2.devcloud.huaweicloud.com/01/nexus/content/repositories/68363c8eed00404786cbc63b89f99838_2_0/</url>
        </snapshotRepository>
    </distributionManagement>
-->
    <!--
    settings.xml配置（<id>必须跟distributionManagement下面的id名对应）
    <settings>
      <servers>
        <server>
          <id>releases</id>
          <username>admin</username>
          <password>admin123</password>
        </server>
        <server>
          <id>snapshots</id>
          <username>admin</username>
          <password>admin123</password>
        </server>
      </servers>
    </settings>
    -->


</project>
